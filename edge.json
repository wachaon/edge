{
    "{9B99823E-922B-4E49-A490-8E6C9ED1F31B}": {
        "source": "(function $43$3A$2F$62$69$6E$2F$67$69$74$68$75$62$2F$65$64$67$65$2F$69$6E$64$65$78$2E$6A$73() { \"use strict\";const IServerXMLHTTPRequest2 = require('MSXML2.ServerXMLHTTP')\r\nconst genGUID = require('genGUID')\r\nconst { writeTextFileSync, existsdirSync } = require('filesystem')\r\nconst { resolve, WorkingDirectory } = require('pathname')\r\nconst Event = require('event')\r\nconst { isRegExp } = require('typecheck')\r\nconst { color } = require('ansi')\r\nconst { Window, request, getWebDriver } = require('webdriver')\r\nconst TERMINATE = 'terminate'\r\n\r\nfunction edge(callback, terminate) {\r\n    let close = false\r\n    class Navigation extends Event {\r\n        emit(url, ...args) {\r\n            if (url === TERMINATE) {\r\n                close = true\r\n                this.get(TERMINATE).forEach((callback) => {\r\n                    callback(url, ...args)\r\n                })\r\n            } else {\r\n                this.forEach((callback, listener) => {\r\n                    if (\r\n                        (isRegExp(listener) && listener.test(url)) ||\r\n                        listener === url\r\n                    ) {\r\n                        callback.forEach((cb) => cb(url, ...args))\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n    const navigation = new Navigation()\r\n\r\n    const window = new Window()\r\n    const result = {\r\n        exports: {}\r\n    }\r\n    const errmsg = genGUID()\r\n\r\n    if (typeof terminate == 'function') navigation.on(TERMINATE, terminate)\r\n    else {\r\n        navigation.on(TERMINATE, (message, res, win) => {\r\n            const log = resolve(WorkingDirectory, 'log')\r\n            const spec = existsdirSync(log)\r\n                ? resolve(log, genGUID() + '.json')\r\n                : resolve(WorkingDirectory, genGUID() + '.json')\r\n            const source = JSON.stringify(res, null, 2)\r\n            console.print('%S%S ', color(255, 165, 0), message)\r\n            console.log(writeTextFileSync(spec, source))\r\n        })\r\n    }\r\n\r\n    try {\r\n        callback(window, navigation, result)\r\n\r\n        let url = window.getURL()\r\n\r\n        while (!close) {\r\n            const res = request(\r\n                IServerXMLHTTPRequest2,\r\n                'GET',\r\n                `http://localhost:${window.port}/session/${window.sessionId}/url`,\r\n                null,\r\n                'Poling'\r\n            )\r\n            if (close || IServerXMLHTTPRequest2.status != 200) break\r\n            let curr = res ? res.value : null\r\n            if (curr && curr !== url) {\r\n                url = curr\r\n                navigation.emit(url, result)\r\n            }\r\n        }\r\n        throw new Error(errmsg)\r\n    } catch (error) {\r\n        if (error.message !== errmsg) throw error\r\n        if (!close) navigation.emit(TERMINATE, result, window)\r\n    } finally {\r\n        window.close()\r\n    }\r\n}\r\n\r\nmodule.exports = edge\r\n\r\nif (wes.Modules[wes.main].path === __filename) getWebDriver()} )()",
        "path": "{edge}/index.js",
        "mapping": {
            "webdriver": "{E9C41242-2EAF-44A9-BCD3-DC333A74E2DF}"
        },
        "type": "transpiled"
    },
    "{E9C41242-2EAF-44A9-BCD3-DC333A74E2DF}": {
        "source": "(function $43$3A$2F$62$69$6E$2F$67$69$74$68$75$62$2F$65$64$67$65$2F$6E$6F$64$65$5F$6D$6F$64$75$6C$65$73$2F$77$65$62$64$72$69$76$65$72$2F$69$6E$64$65$78$2E$6A$73() { \"use strict\";// source: https://github.com/wachaon/webdriver\nconst mods = {\n    \"{B105E3D9-7E0C-4F2A-8317-DEB3F4FFCA53}\": {\n        \"source\": \"(function $43$3A$2F$62$69$6E$2F$67$69$74$68$75$62$2F$77$65$62$64$72$69$76$65$72$2F$69$6E$64$65$78$2E$6A$73() { \\\"use strict\\\";const WShell = require('WScript.Shell')\\r\\nconst { eraseInLine, cursorHrAbs, brightGreen } = require('ansi')\\r\\nconst { download } = require('filesystem')\\r\\nconst { resolve, WorkingDirectory } = require('pathname')\\r\\n\\r\\nconst GET = 'GET'\\r\\nconst POST = 'POST'\\r\\nconst DELETE = 'DELETE'\\r\\nconst BOL = cursorHrAbs(1) // beginning of line\\r\\nconst ELEMENT_ID = 'element-6066-11e4-a52e-4f735466cecf'\\r\\nconst State = ['UNINITIALIZED', 'LOADING', 'LOADED', 'INTERACTIVE', 'COMPLETED']\\r\\nconst spiner = progress(['|', '/', '-', '\\\\\\\\', '|', '/', '-', '\\\\\\\\'])\\r\\n\\r\\nclass Window {\\r\\n    constructor(port, spec) {\\r\\n        const IServerXMLHTTPRequest2 = require('MSXML2.ServerXMLHTTP')\\r\\n\\r\\n        port = port || findUnusedPort(9515)\\r\\n        spec = spec || 'msedgedriver.exe'\\r\\n        const driver = WShell.Exec(`${spec} port=${port}`)\\r\\n        while (driver.Status != 0) {\\r\\n            console.print('%S%S %S', eraseInLine(1), 'driver ', spiner())\\r\\n            WScript.Sleep(50)\\r\\n        }\\r\\n        var { value } = request(\\r\\n            IServerXMLHTTPRequest2,\\r\\n            POST,\\r\\n            `http://localhost:${port}/session`,\\r\\n            {\\r\\n                capabilities: {}\\r\\n            },\\r\\n            'Initialize Session'\\r\\n        )\\r\\n        const { sessionId } = value\\r\\n\\r\\n        this.port = port\\r\\n        this.driver = driver\\r\\n        this.sessionId = sessionId\\r\\n        this.IServerXMLHTTPRequest2 = IServerXMLHTTPRequest2\\r\\n        this.document = new Document(this)\\r\\n    }\\r\\n    rect(prop) {\\r\\n        // {x, y, width, height}\\r\\n        request(\\r\\n            this.IServerXMLHTTPRequest2,\\r\\n            POST,\\r\\n            `http://localhost:${this.port}/session/${this.sessionId}/window/rect`,\\r\\n            prop,\\r\\n            'Set Window Rect'\\r\\n        )\\r\\n    }\\r\\n    navigate(url) {\\r\\n        request(\\r\\n            this.IServerXMLHTTPRequest2,\\r\\n            POST,\\r\\n            `http://localhost:${this.port}/session/${this.sessionId}/url`,\\r\\n            {\\r\\n                url: url\\r\\n            },\\r\\n            'Navegate URL'\\r\\n        )\\r\\n    }\\r\\n    close(messame) {\\r\\n        request(\\r\\n            this.IServerXMLHTTPRequest2,\\r\\n            DELETE,\\r\\n            `http://localhost:${this.port}/session/${this.sessionId}/window`,\\r\\n            null,\\r\\n            'Close Window'\\r\\n        )\\r\\n        request(\\r\\n            this.IServerXMLHTTPRequest2,\\r\\n            DELETE,\\r\\n            `http://localhost:${this.port}/session/${this.sessionId}`,\\r\\n            null,\\r\\n            'Delete Session'\\r\\n        )\\r\\n        this.driver.Terminate()\\r\\n        console.log(messame || '')\\r\\n    }\\r\\n    getURL() {\\r\\n        const res = request(\\r\\n            this.IServerXMLHTTPRequest2,\\r\\n            GET,\\r\\n            `http://localhost:${this.port}/session/${this.sessionId}/url`,\\r\\n            null,\\r\\n            'Get URL'\\r\\n        )\\r\\n        return res ? res.value : null\\r\\n    }\\r\\n    back() {\\r\\n        request(\\r\\n            this.IServerXMLHTTPRequest2,\\r\\n            POST,\\r\\n            `http://localhost:${this.port}/session/${this.sessionId}/back`,\\r\\n            {},\\r\\n            'Back History'\\r\\n        )\\r\\n    }\\r\\n    forward() {\\r\\n        request(\\r\\n            this.IServerXMLHTTPRequest2,\\r\\n            POST,\\r\\n            `http://localhost:${this.port}/session/${this.sessionId}/forward`,\\r\\n            {},\\r\\n            'Forward History'\\r\\n        )\\r\\n    }\\r\\n    getStatus() {\\r\\n        const res = request(\\r\\n            this.IServerXMLHTTPRequest2,\\r\\n            GET,\\r\\n            `http://localhost:${this.port}/status`,\\r\\n            null,\\r\\n            'Get Status'\\r\\n        )\\r\\n        if (res) return res.value\\r\\n    }\\r\\n    getCookie(name) {\\r\\n        const url = `http://localhost:${this.port}/session/${this.sessionId}/cookie` + (name != null ? '/' + name : '')\\r\\n        const res = request(this.IServerXMLHTTPRequest2, GET, url, null, 'Get Cookie')\\r\\n        return res ? res.value : null\\r\\n    }\\r\\n    addCookie(field) {\\r\\n        const cookie = { cookie: field }\\r\\n        const res = request(\\r\\n            this.IServerXMLHTTPRequest2,\\r\\n            POST,\\r\\n            `http://localhost:${this.port}/session/${this.sessionId}/cookie`,\\r\\n            cookie,\\r\\n            'Add Cookie'\\r\\n        )\\r\\n        return res ? res.value : null\\r\\n    }\\r\\n    deleteCookie(name) {\\r\\n        request(\\r\\n            this.IServerXMLHTTPRequest2,\\r\\n            DELETE,\\r\\n            `http://localhost:${this.port}/session/${this.sessionId}/cookie/${name}`,\\r\\n            null,\\r\\n            'Delete Cookie'\\r\\n        )\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Document {\\r\\n    constructor(window) {\\r\\n        this.parentWindow = window\\r\\n    }\\r\\n    querySelectorAll(selector) {\\r\\n        const window = this.parentWindow\\r\\n        const res = request(\\r\\n            window.IServerXMLHTTPRequest2,\\r\\n            POST,\\r\\n            `http://localhost:${window.port}/session/${window.sessionId}/elements`,\\r\\n            {\\r\\n                using: 'css selector',\\r\\n                value: selector\\r\\n            },\\r\\n            'Select Elements'\\r\\n        )\\r\\n        const elms = res != null ? res.value.map((val) => new Element(this, val[ELEMENT_ID])) : null\\r\\n        return elms\\r\\n    }\\r\\n    getTitle() {\\r\\n        const window = this.parentWindow\\r\\n        return request(\\r\\n            window.IServerXMLHTTPRequest2,\\r\\n            GET,\\r\\n            `http://localhost:${window.port}/session/${window.sessionId}/title`\\r\\n        )\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Element {\\r\\n    constructor(document, elementId) {\\r\\n        this.parentDocument = document\\r\\n        this.elementId = elementId\\r\\n    }\\r\\n    querySelectorAll(selector) {\\r\\n        const document = this.parentDocument\\r\\n        const window = document.parentWindow\\r\\n        const res = request(\\r\\n            window.IServerXMLHTTPRequest2,\\r\\n            POST,\\r\\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/elements`,\\r\\n            {\\r\\n                using: 'css selector',\\r\\n                value: selector\\r\\n            },\\r\\n            'Select Elements'\\r\\n        )\\r\\n        const elms = res != null ? res.value.map((val) => new Element(document, val[ELEMENT_ID])) : null\\r\\n        return elms\\r\\n    }\\r\\n    getAttribute(attribute) {\\r\\n        const window = this.parentDocument.parentWindow\\r\\n        const res = request(\\r\\n            window.IServerXMLHTTPRequest2,\\r\\n            GET,\\r\\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/attribute/${attribute}`,\\r\\n            null,\\r\\n            'Get Attribute'\\r\\n        )\\r\\n        return res ? res.value : 'null'\\r\\n    }\\r\\n    getProperty(property) {\\r\\n        const window = this.parentDocument.parentWindow\\r\\n        const res = request(\\r\\n            window.IServerXMLHTTPRequest2,\\r\\n            GET,\\r\\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/property/${property}`,\\r\\n            null,\\r\\n            'Get Property'\\r\\n        )\\r\\n        return res ? res.value : 'null'\\r\\n    }\\r\\n    click() {\\r\\n        const window = this.parentDocument.parentWindow\\r\\n        request(\\r\\n            window.IServerXMLHTTPRequest2,\\r\\n            POST,\\r\\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/click`,\\r\\n            {},\\r\\n            'Click Element'\\r\\n        )\\r\\n    }\\r\\n    setValue(text) {\\r\\n        const window = this.parentDocument.parentWindow\\r\\n        request(\\r\\n            window.IServerXMLHTTPRequest2,\\r\\n            POST,\\r\\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/value`,\\r\\n            {\\r\\n                text\\r\\n            },\\r\\n            'Input Value'\\r\\n        )\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getWebDriver() {\\r\\n    const version = WShell.exec(\\r\\n        'powershell -Command Get-AppxPackage -Name Microsoft.MicrosoftEdge.* | foreach{$_.Version}'\\r\\n    ).StdOut.ReadAll()\\r\\n\\r\\n    const architecture =\\r\\n        require('WScript.Shell').Environment('Process').Item('PROCESSOR_ARCHITECTURE') === 'x86' ? '32' : '64'\\r\\n\\r\\n    const url = `https://msedgedriver.azureedge.net/${version}/edgedriver_win${architecture}.zip`\\r\\n\\r\\n    download(url, resolve(WorkingDirectory, `edgedriver_win${architecture}.zip`))\\r\\n    console.log('%sDownload of webdriver is complete!', brightGreen)\\r\\n}\\r\\n\\r\\n// util\\r\\nfunction request(Server, method, url, parameter, processing = '', finished = '') {\\r\\n    Server.open(method, url, true)\\r\\n    if (method.toUpperCase === POST) Server.setRequestHeader('Content-Type', 'application/json')\\r\\n    if (parameter != null) Server.send(JSON.stringify(parameter))\\r\\n    else Server.send()\\r\\n\\r\\n    while (State[Server.readyState] != 'COMPLETED') {\\r\\n        console.print('%S%S %S%S', eraseInLine(0), processing, spiner(), BOL)\\r\\n        WScript.Sleep(50)\\r\\n    }\\r\\n    console.print('%S%S', eraseInLine(0), finished)\\r\\n\\r\\n    const res = Server.responseText\\r\\n    return JSON.parse(res)\\r\\n}\\r\\n\\r\\nfunction progress(indicator) {\\r\\n    let i = 0\\r\\n    return function increment() {\\r\\n        return indicator[i++ % indicator.length]\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction findUnusedPort(port) {\\r\\n    const command = 'netstat -nao'\\r\\n    const netstat = WShell.Exec(command)\\r\\n    const res = netstat.StdOut.ReadAll()\\r\\n\\r\\n    while (true) {\\r\\n        port = port || parseInt(Math.random() * (65535 - 49152)) + 49152\\r\\n        const exp = new RegExp('(TCP|UDP)\\\\\\\\s+\\\\\\\\d{1,3}.\\\\\\\\d{1,3}.\\\\\\\\d{1,3}.\\\\\\\\d{1,3}:' + port + '\\\\\\\\s')\\r\\n        if (!exp.test(res)) break\\r\\n        port = null\\r\\n    }\\r\\n    return port\\r\\n}\\r\\n\\r\\n// exports\\r\\nmodule.exports = {\\r\\n    Window,\\r\\n    Document,\\r\\n    Element,\\r\\n    request,\\r\\n    getWebDriver\\r\\n}\\r\\n\\r\\n// command line\\r\\nif (wes.Modules[wes.main].path === __filename) getWebDriver()\\r\\n} )()\",\n        \"path\": \"{@wachaon/webdriver}/index.js\",\n        \"mapping\": {},\n        \"type\": \"transpiled\"\n    },\n    \"{781FD974-CDF1-44BC-B57E-C23C73329787}\": {\n        \"source\": \"{\\n  \\\"name\\\": \\\"webdriver\\\",\\n  \\\"version\\\": \\\"0.1.0\\\",\\n  \\\"description\\\": \\\"Operate the browser with wes\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"scripts\\\": {\\n    \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\"\\n  },\\n  \\\"repository\\\": {\\n    \\\"type\\\": \\\"git\\\",\\n    \\\"url\\\": \\\"git+https://github.com/wachaon/webdriver.git\\\"\\n  },\\n  \\\"keywords\\\": [\\n    \\\"webdriver\\\"\\n  ],\\n  \\\"author\\\": \\\"wachaon\\\",\\n  \\\"license\\\": \\\"MIT\\\",\\n  \\\"bugs\\\": {\\n    \\\"url\\\": \\\"https://github.com/wachaon/webdriver/issues\\\"\\n  },\\n  \\\"homepage\\\": \\\"https://github.com/wachaon/webdriver#readme\\\"\\n}\\n\",\n        \"path\": \"{@wachaon/webdriver}/package.json\"\n    }\n}\nif ( wes.Modules[wes.main].path === __filename ) wes.main = '{B105E3D9-7E0C-4F2A-8317-DEB3F4FFCA53}'\nObject.keys(mods).forEach(key => wes.Modules[key] = mods[key])\nmodule.exports = require( '{B105E3D9-7E0C-4F2A-8317-DEB3F4FFCA53}' )\n} )()",
        "path": "{edge}/node_modules/webdriver/index.js",
        "mapping": {},
        "type": "transpiled"
    },
    "{B105E3D9-7E0C-4F2A-8317-DEB3F4FFCA53}": {
        "source": "(function $43$3A$2F$62$69$6E$2F$67$69$74$68$75$62$2F$77$65$62$64$72$69$76$65$72$2F$69$6E$64$65$78$2E$6A$73() { \"use strict\";const WShell = require('WScript.Shell')\r\nconst { eraseInLine, cursorHrAbs, brightGreen } = require('ansi')\r\nconst { download } = require('filesystem')\r\nconst { resolve, WorkingDirectory } = require('pathname')\r\n\r\nconst GET = 'GET'\r\nconst POST = 'POST'\r\nconst DELETE = 'DELETE'\r\nconst BOL = cursorHrAbs(1) // beginning of line\r\nconst ELEMENT_ID = 'element-6066-11e4-a52e-4f735466cecf'\r\nconst State = ['UNINITIALIZED', 'LOADING', 'LOADED', 'INTERACTIVE', 'COMPLETED']\r\nconst spiner = progress(['|', '/', '-', '\\\\', '|', '/', '-', '\\\\'])\r\n\r\nclass Window {\r\n    constructor(port, spec) {\r\n        const IServerXMLHTTPRequest2 = require('MSXML2.ServerXMLHTTP')\r\n\r\n        port = port || findUnusedPort(9515)\r\n        spec = spec || 'msedgedriver.exe'\r\n        const driver = WShell.Exec(`${spec} port=${port}`)\r\n        while (driver.Status != 0) {\r\n            console.print('%S%S %S', eraseInLine(1), 'driver ', spiner())\r\n            WScript.Sleep(50)\r\n        }\r\n        var { value } = request(\r\n            IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${port}/session`,\r\n            {\r\n                capabilities: {}\r\n            },\r\n            'Initialize Session'\r\n        )\r\n        const { sessionId } = value\r\n\r\n        this.port = port\r\n        this.driver = driver\r\n        this.sessionId = sessionId\r\n        this.IServerXMLHTTPRequest2 = IServerXMLHTTPRequest2\r\n        this.document = new Document(this)\r\n    }\r\n    rect(prop) {\r\n        // {x, y, width, height}\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window/rect`,\r\n            prop,\r\n            'Set Window Rect'\r\n        )\r\n    }\r\n    navigate(url) {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/url`,\r\n            {\r\n                url: url\r\n            },\r\n            'Navegate URL'\r\n        )\r\n    }\r\n    close(messame) {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            DELETE,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window`,\r\n            null,\r\n            'Close Window'\r\n        )\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            DELETE,\r\n            `http://localhost:${this.port}/session/${this.sessionId}`,\r\n            null,\r\n            'Delete Session'\r\n        )\r\n        this.driver.Terminate()\r\n        console.log(messame || '')\r\n    }\r\n    getURL() {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/url`,\r\n            null,\r\n            'Get URL'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    back() {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/back`,\r\n            {},\r\n            'Back History'\r\n        )\r\n    }\r\n    forward() {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/forward`,\r\n            {},\r\n            'Forward History'\r\n        )\r\n    }\r\n    getStatus() {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${this.port}/status`,\r\n            null,\r\n            'Get Status'\r\n        )\r\n        if (res) return res.value\r\n    }\r\n    getCookie(name) {\r\n        const url = `http://localhost:${this.port}/session/${this.sessionId}/cookie` + (name != null ? '/' + name : '')\r\n        const res = request(this.IServerXMLHTTPRequest2, GET, url, null, 'Get Cookie')\r\n        return res ? res.value : null\r\n    }\r\n    addCookie(field) {\r\n        const cookie = { cookie: field }\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/cookie`,\r\n            cookie,\r\n            'Add Cookie'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    deleteCookie(name) {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            DELETE,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/cookie/${name}`,\r\n            null,\r\n            'Delete Cookie'\r\n        )\r\n    }\r\n}\r\n\r\nclass Document {\r\n    constructor(window) {\r\n        this.parentWindow = window\r\n    }\r\n    querySelectorAll(selector) {\r\n        const window = this.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/elements`,\r\n            {\r\n                using: 'css selector',\r\n                value: selector\r\n            },\r\n            'Select Elements'\r\n        )\r\n        const elms = res != null ? res.value.map((val) => new Element(this, val[ELEMENT_ID])) : null\r\n        return elms\r\n    }\r\n    getTitle() {\r\n        const window = this.parentWindow\r\n        return request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/title`\r\n        )\r\n    }\r\n}\r\n\r\nclass Element {\r\n    constructor(document, elementId) {\r\n        this.parentDocument = document\r\n        this.elementId = elementId\r\n    }\r\n    querySelectorAll(selector) {\r\n        const document = this.parentDocument\r\n        const window = document.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/elements`,\r\n            {\r\n                using: 'css selector',\r\n                value: selector\r\n            },\r\n            'Select Elements'\r\n        )\r\n        const elms = res != null ? res.value.map((val) => new Element(document, val[ELEMENT_ID])) : null\r\n        return elms\r\n    }\r\n    getAttribute(attribute) {\r\n        const window = this.parentDocument.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/attribute/${attribute}`,\r\n            null,\r\n            'Get Attribute'\r\n        )\r\n        return res ? res.value : 'null'\r\n    }\r\n    getProperty(property) {\r\n        const window = this.parentDocument.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/property/${property}`,\r\n            null,\r\n            'Get Property'\r\n        )\r\n        return res ? res.value : 'null'\r\n    }\r\n    click() {\r\n        const window = this.parentDocument.parentWindow\r\n        request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/click`,\r\n            {},\r\n            'Click Element'\r\n        )\r\n    }\r\n    setValue(text) {\r\n        const window = this.parentDocument.parentWindow\r\n        request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/value`,\r\n            {\r\n                text\r\n            },\r\n            'Input Value'\r\n        )\r\n    }\r\n}\r\n\r\nfunction getWebDriver() {\r\n    const version = WShell.exec(\r\n        'powershell -Command Get-AppxPackage -Name Microsoft.MicrosoftEdge.* | foreach{$_.Version}'\r\n    ).StdOut.ReadAll()\r\n\r\n    const architecture =\r\n        require('WScript.Shell').Environment('Process').Item('PROCESSOR_ARCHITECTURE') === 'x86' ? '32' : '64'\r\n\r\n    const url = `https://msedgedriver.azureedge.net/${version}/edgedriver_win${architecture}.zip`\r\n\r\n    download(url, resolve(WorkingDirectory, `edgedriver_win${architecture}.zip`))\r\n    console.log('%sDownload of webdriver is complete!', brightGreen)\r\n}\r\n\r\n// util\r\nfunction request(Server, method, url, parameter, processing = '', finished = '') {\r\n    Server.open(method, url, true)\r\n    if (method.toUpperCase === POST) Server.setRequestHeader('Content-Type', 'application/json')\r\n    if (parameter != null) Server.send(JSON.stringify(parameter))\r\n    else Server.send()\r\n\r\n    while (State[Server.readyState] != 'COMPLETED') {\r\n        console.print('%S%S %S%S', eraseInLine(0), processing, spiner(), BOL)\r\n        WScript.Sleep(50)\r\n    }\r\n    console.print('%S%S', eraseInLine(0), finished)\r\n\r\n    const res = Server.responseText\r\n    return JSON.parse(res)\r\n}\r\n\r\nfunction progress(indicator) {\r\n    let i = 0\r\n    return function increment() {\r\n        return indicator[i++ % indicator.length]\r\n    }\r\n}\r\n\r\nfunction findUnusedPort(port) {\r\n    const command = 'netstat -nao'\r\n    const netstat = WShell.Exec(command)\r\n    const res = netstat.StdOut.ReadAll()\r\n\r\n    while (true) {\r\n        port = port || parseInt(Math.random() * (65535 - 49152)) + 49152\r\n        const exp = new RegExp('(TCP|UDP)\\\\s+\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}:' + port + '\\\\s')\r\n        if (!exp.test(res)) break\r\n        port = null\r\n    }\r\n    return port\r\n}\r\n\r\n// exports\r\nmodule.exports = {\r\n    Window,\r\n    Document,\r\n    Element,\r\n    request,\r\n    getWebDriver\r\n}\r\n\r\n// command line\r\nif (wes.Modules[wes.main].path === __filename) getWebDriver()\r\n} )()",
        "path": "{edge}/{@wachaon/webdriver}/index.js",
        "mapping": {},
        "type": "transpiled"
    },
    "{781FD974-CDF1-44BC-B57E-C23C73329787}": {
        "source": "{\n  \"name\": \"webdriver\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Operate the browser with wes\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/webdriver.git\"\n  },\n  \"keywords\": [\n    \"webdriver\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/webdriver/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/webdriver#readme\"\n}\n",
        "path": "{edge}/{@wachaon/webdriver}/package.json"
    },
    "{5096E0F9-AF00-4178-84C9-563DBE2D7560}": {
        "source": "{\n  \"name\": \"edge\",\n  \"version\": \"0.0.5\",\n  \"description\": \"Edge automation assistance\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"webdriver\": \"0.0.7\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/edge.git\"\n  },\n  \"keywords\": [\n    \"wes edge automation\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/edge/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/edge#readme\"\n}\n",
        "path": "{edge}/package.json"
    }
}