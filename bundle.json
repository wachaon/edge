{
  "{C1572E7C-99DE-4B6E-B3CF-37E4DC1E2BED}": {
    "source": "{\n  \"name\": \"edge\",\n  \"version\": \"0.4.3\",\n  \"description\": \"Edge automation assistance\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/edge.git\"\n  },\n  \"keywords\": [\n    \"wes edge automation\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/edge/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/edge#readme\",\n  \"wes\": {\n    \"dependencies\": {\n      \"webdriver\": \"0.5.0\"\n    }\n  }\n}",
    "mapping": {},
    "path": "{edge}/package.json"
  },
  "{1505D438-2A95-4EB3-AB93-A79C4A7608BB}": {
    "source": "const IServerXMLHTTPRequest2 = require('MSXML2.ServerXMLHTTP')\r\nconst { eraseInLine, cursorHrAbs, color } = require('ansi')\r\nconst { has } = require('argv')\r\nconst { writeFileSync, existsdirSync } = require('filesystem')\r\nconst { resolve, WorkingDirectory } = require('pathname')\r\nconst isCLI = require('isCLI')\r\nconst { isRegExp } = require('typecheck')\r\nconst genGUID = require('genGUID')\r\nconst Event = require('event')\r\nconst { Window, request, getEdgeWebDriver } = require('webdriver')\r\nconst TERMINATE = 'terminate'\r\nconst BOL = cursorHrAbs(1) // beginning of line\r\nconst EIL = eraseInLine(0) // erase in line\r\n\r\nfunction edge(callback, terminate, options = { capabilities: {} }) {\r\n    let close = false\r\n    class Navigation extends Event {\r\n        emit(url, ...args) {\r\n            console.print(`${BOL}${EIL}`)\r\n            if (url === TERMINATE) {\r\n                close = true\r\n                this.get(TERMINATE).forEach((callback) => {\r\n                    callback(url, ...args)\r\n                })\r\n            } else {\r\n                this.forEach((callback, listener) => {\r\n                    if (\r\n                        (isRegExp(listener) && listener.test(url)) ||\r\n                        listener === url\r\n                    ) {\r\n                        callback.forEach((cb) => cb(url, ...args))\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n    const navigation = new Navigation()\r\n\r\n    const window = new Window(null, 'EDGE', options)\r\n    const result = {\r\n        exports: {}\r\n    }\r\n    const errmsg = genGUID()\r\n\r\n    if (typeof terminate == 'function') navigation.on(TERMINATE, terminate)\r\n    else {\r\n        navigation.on(TERMINATE, (message, res) => {\r\n            const file = res.spec != null ? res.spec : genGUID() + '.json'\r\n            const log = resolve(WorkingDirectory, 'log')\r\n            const spec = existsdirSync(log)\r\n                ? resolve(log, file)\r\n                : resolve(WorkingDirectory, file)\r\n            const source = JSON.stringify(res, null, 2)\r\n            console.print('%S%S ', color(255, 165, 0), message || 'terminate')\r\n            console.log(writeFileSync(spec, source, 'UTF-8'))\r\n        })\r\n    }\r\n\r\n    try {\r\n        callback(window, navigation, result)\r\n\r\n        let url = 'about:blank'\r\n\r\n        while (!close) {\r\n            const _url = nomarize(url)\r\n            let res = request(\r\n                IServerXMLHTTPRequest2,\r\n                'GET',\r\n                `http://localhost:${window.port}/session/${window.sessionId}/url`,\r\n                null,\r\n                _url\r\n            )\r\n            if (close || IServerXMLHTTPRequest2.status != 200) break\r\n            let curr = res ? res.value : null\r\n            if (curr && curr !== url) {\r\n                url = curr\r\n                navigation.emit(url, result)\r\n            }\r\n        }\r\n        throw new Error(errmsg)\r\n    } catch (error) {\r\n        if (!close) navigation.emit(TERMINATE, result, window)\r\n        // if (error.message !== errmsg) throw error\r\n    } finally {\r\n        window.quit()\r\n        console.log('') // Line feed\r\n        console.log('[result]:\\n%O', result)\r\n        return result\r\n    }\r\n}\r\n\r\nmodule.exports = edge\r\n\r\n// util\r\nfunction nomarize(url, size = 60) {\r\n    if (url.length < size) return url\r\n    const exp = /(^https?:\\/\\/[^\\/]+\\/)/\r\n    const prefix = exp.test(url) ? url.match(/(^https?:\\/\\/[^\\/]+\\/)/)[1] : url.slice(0, 20)\r\n    const suffix = url.slice((size - 4 - prefix.length) * -1)\r\n    return `${prefix} ...${suffix}`\r\n}\r\n\r\n// command line\r\nif (isCLI(__filename) && (has('d') || has('download'))) getEdgeWebDriver()\r\n",
    "mapping": {
      "webdriver": "{942F14EA-323C-4012-9E85-013756DEEED9}"
    },
    "path": "{edge}/index.js"
  },
  "{942F14EA-323C-4012-9E85-013756DEEED9}": {
    "source": "const WShell = require('WScript.Shell')\r\nconst { eraseInLine, cursorHrAbs, color } = require('ansi')\r\nconst { has } = require('argv')\r\nconst { moveFileSync, deleteFileSync, deletedirSync, existsFileSync, existsdirSync, download } = require('filesystem')\r\nconst { resolve, WorkingDirectory, toPosixSep } = require('pathname')\r\nconst { unzip } = require('zip')\r\nconst isCLI = require('isCLI')\r\n\r\nconst GET = 'GET'\r\nconst POST = 'POST'\r\nconst DELETE = 'DELETE'\r\nconst BOL = cursorHrAbs(1) // beginning of line\r\nconst EIL = eraseInLine(0) // erase in line\r\nconst ELEMENT_ID = 'element-6066-11e4-a52e-4f735466cecf'\r\nconst State = ['UNINITIALIZED', 'LOADING', 'LOADED', 'INTERACTIVE', 'COMPLETED']\r\nconst spiner = progress(['|', '/', '-', '\\\\'])\r\nconst orange = color('#FFA500')\r\nconst EDGE = 'msedgedriver.exe'\r\nconst CHROME = 'chromedriver.exe'\r\nconst GECKO = 'geckodriver.exe'\r\n\r\nclass Window {\r\n    constructor(port, spec = EDGE, parameter = { capabilities: {} }) {\r\n        const IServerXMLHTTPRequest2 = require('MSXML2.ServerXMLHTTP')\r\n\r\n        port = port || findUnusedPort(9515)\r\n        console.debug(() => port)\r\n\r\n        spec = spec.toUpperCase() === 'CHROME' ? CHROME :\r\n            spec.toUpperCase() === 'GECKO' ? GECKO :\r\n                spec.toUpperCase() === 'EDGE' ? EDGE : spec\r\n        console.debug(() => spec)\r\n\r\n        const driver = WShell.Exec(`${spec} --port=${port} --silent`)\r\n        console.debug(() => driver)\r\n\r\n        var { value } = request(\r\n            IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${port}/session`,\r\n            parameter,\r\n            'Initialize Session'\r\n        )\r\n        console.debug(() => value)\r\n\r\n        const { sessionId } = value\r\n        console.debug(() => sessionId)\r\n\r\n        this.port = port\r\n        this.driver = driver\r\n        this.sessionId = sessionId\r\n        this.IServerXMLHTTPRequest2 = IServerXMLHTTPRequest2\r\n\r\n        const handle = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window`,\r\n            null,\r\n            'Get Handle'\r\n        )\r\n        this.handle = handle ? handle.value : null\r\n\r\n        this.document = new Document(this)\r\n    }\r\n    rect(prop) {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window/rect`,\r\n            prop,\r\n            'Set Window Rect'\r\n        )\r\n    }\r\n    navigate(url) {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/url`,\r\n            {\r\n                url: url\r\n            },\r\n            'Navegate URL'\r\n        )\r\n    }\r\n    back() {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/back`,\r\n            {},\r\n            'Back History'\r\n        )\r\n    }\r\n    forward() {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/forward`,\r\n            {},\r\n            'Forward History'\r\n        )\r\n    }\r\n    getURL() {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/url`,\r\n            null,\r\n            'Get URL'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    getStatus() {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${this.port}/status`,\r\n            null,\r\n            'Get Status'\r\n        )\r\n        if (res) return res.value\r\n    }\r\n    getHandle() {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window`,\r\n            null,\r\n            'Get Handle'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    getHandles() {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window/handles`,\r\n            null,\r\n            'Get Handles'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    switchTo(windowHandle) {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window`,\r\n            {\r\n                handle: windowHandle\r\n            },\r\n            'Switch Window'\r\n        )\r\n        if (res) {\r\n            this.handle = windowHandle\r\n            return res.value\r\n        } return null\r\n    }\r\n    move(handle) {\r\n        const currHandle = this.getHandle()\r\n        if (!handle) handle = this.getHandles().filter((hnd) => (hnd === currHandle ? false : true))[0]\r\n        this.switchTo(handle)\r\n        const url = this.getURL()\r\n        this.switchTo(currHandle)\r\n        this.navigate(url)\r\n        this.switchTo(handle)\r\n        this.close()\r\n        this.switchTo(currHandle)\r\n    }\r\n    newWindow() {\r\n        const res = request(\r\n            this.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window/new`,\r\n            {},\r\n            'New Window'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    close(message) {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            DELETE,\r\n            `http://localhost:${this.port}/session/${this.sessionId}/window`,\r\n            null,\r\n            'Close Window'\r\n        )\r\n        if (message != null) console.log(message)\r\n    }\r\n    delete(message) {\r\n        request(\r\n            this.IServerXMLHTTPRequest2,\r\n            DELETE,\r\n            `http://localhost:${this.port}/session/${this.sessionId}`,\r\n            null,\r\n            'Delete Session'\r\n        )\r\n        this.driver.Terminate()\r\n        if (message != null) console.log(message)\r\n    }\r\n    quit(message) {\r\n        this.close()\r\n        this.delete(message)\r\n    }\r\n}\r\n\r\nclass Document {\r\n    constructor(window) {\r\n        this.parentWindow = window\r\n    }\r\n    querySelectorAll(selector) {\r\n        const window = this.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/elements`,\r\n            {\r\n                using: 'css selector',\r\n                value: selector\r\n            },\r\n            'Select Elements'\r\n        )\r\n        const elms = res != null ? res.value.map((val) => new Element(this, val[ELEMENT_ID])) : null\r\n        return elms\r\n    }\r\n    xpath(path) {\r\n        const window = this.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/elements`,\r\n            {\r\n                using: 'xpath',\r\n                value: path\r\n            },\r\n            'Select Elements'\r\n        )\r\n        const elms = res != null ? res.value.map((val) => new Element(this, val[ELEMENT_ID])) : null\r\n        return elms\r\n    }\r\n    getTitle() {\r\n        const window = this.parentWindow\r\n        return request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/title`\r\n        )\r\n    }\r\n    getSource() {\r\n        const window = this.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/source`,\r\n            {},\r\n            'Get Source'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    executeScript(script = function () { }, args = []) {\r\n        const code = `return (${String(script)})(...arguments)`\r\n        const window = this.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/execute/sync`,\r\n            {\r\n                script: code,\r\n                args\r\n            },\r\n            'Execute Script'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    takeScreenShot() {\r\n        const window = this.parentWindow\r\n        const { document } = window\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/screenshot`,\r\n            {},\r\n            'Take ScreenShot'\r\n        )\r\n        if (!res) return null\r\n        const message = document.executeScript(() => document.readyState)\r\n        console.log('take screen shot %O', message)\r\n\r\n        const DOMDocument = require('MSXML2.DOMDocument.3.0')\r\n        const IXMLDOMElement = DOMDocument.createElement('base64')\r\n        IXMLDOMElement.dataType = 'bin.base64'\r\n        IXMLDOMElement.text = res.value\r\n        return IXMLDOMElement.nodeTypedValue\r\n    }\r\n    getCookie(name) {\r\n        const window = this.parentWindow\r\n        const url = `http://localhost:${window.port}/session/${window.sessionId}/cookie` + (name != null ? '/' + name : '')\r\n        const res = request(window.IServerXMLHTTPRequest2, GET, url, null, 'Get Cookie')\r\n        return res ? res.value : null\r\n    }\r\n    addCookie(cookie) {\r\n        // cookie: {name: string, value: string, domain: string?, httpOnly: boolean?, path: string?, secure: boolean?}\r\n        const window = this.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/cookie`,\r\n            { cookie },\r\n            'Add Cookie'\r\n        )\r\n        return res ? res.value : null\r\n    }\r\n    deleteCookie(name) {\r\n        const window = this.parentWindow\r\n        request(\r\n            window.IServerXMLHTTPRequest2,\r\n            DELETE,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/cookie/${name}`,\r\n            null,\r\n            'Delete Cookie'\r\n        )\r\n    }\r\n}\r\n\r\nclass Element {\r\n    constructor(document, elementId) {\r\n        this.parentDocument = document\r\n        this.elementId = elementId\r\n    }\r\n    querySelectorAll(selector) {\r\n        const document = this.parentDocument\r\n        const window = document.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/elements`,\r\n            {\r\n                using: 'css selector',\r\n                value: selector\r\n            },\r\n            'Select Elements'\r\n        )\r\n        const elms = res != null ? res.value.map((val) => new Element(document, val[ELEMENT_ID])) : null\r\n        return elms\r\n    }\r\n    getAttribute(attribute) {\r\n        const window = this.parentDocument.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/attribute/${attribute}`,\r\n            null,\r\n            'Get Attribute'\r\n        )\r\n        return res ? res.value : 'null'\r\n    }\r\n    getProperty(property) {\r\n        const window = this.parentDocument.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/property/${property}`,\r\n            null,\r\n            'Get Property'\r\n        )\r\n        return res ? res.value : 'null'\r\n    }\r\n    click() {\r\n        const window = this.parentDocument.parentWindow\r\n        request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/click`,\r\n            {},\r\n            'Click Element'\r\n        )\r\n    }\r\n    setValue(text) {\r\n        const window = this.parentDocument.parentWindow\r\n        request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/value`,\r\n            {\r\n                text\r\n            },\r\n            'Input Value'\r\n        )\r\n    }\r\n    clearValue(text) {\r\n        const window = this.parentDocument.parentWindow\r\n        request(\r\n            window.IServerXMLHTTPRequest2,\r\n            POST,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/clear`,\r\n            {},\r\n            'Clear Value'\r\n        )\r\n    }\r\n    takeScreenShot() {\r\n        const document = this.parentDocument\r\n        const window = document.parentWindow\r\n        const res = request(\r\n            window.IServerXMLHTTPRequest2,\r\n            GET,\r\n            `http://localhost:${window.port}/session/${window.sessionId}/element/${this.elementId}/screenshot`,\r\n            {},\r\n            'Take ScreenShot'\r\n        )\r\n        if (!res) return null\r\n        const message = document.executeScript(() => document.readyState)\r\n        console.log('take screen shot %O', message)\r\n\r\n        const DOMDocument = require('MSXML2.DOMDocument.3.0')\r\n        const IXMLDOMElement = DOMDocument.createElement('base64')\r\n        IXMLDOMElement.dataType = 'bin.base64'\r\n        IXMLDOMElement.text = res.value\r\n        return IXMLDOMElement.nodeTypedValue\r\n    }\r\n}\r\n\r\n// util\r\nfunction getChromeVersion(spec = '\"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\"') {\r\n    const [version] = WShell.exec(`cmd /C dir /B /O-N ${spec}`).StdOut.ReadAll().trim().split(/\\r?\\n/).slice(-1)\r\n    return version\r\n}\r\n\r\nfunction getChromeDriverVersion(spec = CHROME) {\r\n    return WShell.exec(`cmd /C ${spec} -v`)\r\n        .StdOut.ReadAll()\r\n        .trim()\r\n        .replace(/^ChromeDriver ([\\d\\.]+) .+/, '$1')\r\n}\r\n\r\nfunction getFireFoxVersion(spec = '\"C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\"') {\r\n    return WShell.exec(`cmd /C ${spec} -v`).StdOut.ReadAll().trim().slice('Mozilla Firefox '.length)\r\n}\r\n\r\nfunction getFireFoxDriverVersion(spec = GECKO) {\r\n    return WShell.exec(`cmd /C ${spec} -V`)\r\n        .StdOut.ReadAll()\r\n        .trim()\r\n        .split(/\\r?\\n/)[0]\r\n        .replace(/^geckodriver ([\\d\\.]+) .+/, '$1')\r\n}\r\n\r\nfunction getEdgeVersion() {\r\n    return WShell.exec('powershell -Command Get-AppxPackage -Name Microsoft.MicrosoftEdge.* | foreach{$_.Version}')\r\n        .StdOut.ReadAll()\r\n        .trim()\r\n}\r\n\r\nfunction getEdgeDriverVersion(spec = EDGE) {\r\n    return WShell.exec(`cmd /C ${spec} -v`)\r\n        .StdOut.ReadAll()\r\n        .trim()\r\n        .replace(/^MSEdgeDriver ([\\d\\.]+) .+/, '$1')\r\n}\r\n\r\nfunction request(Server, method, url, parameter, processing, finished) {\r\n    Server.open(method, url, true)\r\n    if (method.toUpperCase() === POST) Server.setRequestHeader('Content-Type', 'application/json')\r\n    if (parameter != null) Server.send(JSON.stringify(parameter))\r\n    else Server.send()\r\n\r\n    let display\r\n    while (State[Server.readyState] != 'COMPLETED') {\r\n        if (processing !== null) console.weaklog(`${processing} ${spiner()} ${State[Server.readyState]}`)\r\n        WScript.Sleep(50)\r\n    }\r\n\r\n    if (Server.status != 200) {\r\n        throw new Error('Server Error: ' + Server.status + '\\nurl: ' + url + '\\nparameter: ' + parameter != null ? JSON.stringify(parameter, null, 2) : '{}')\r\n    }\r\n\r\n    console.weaklog(`${finished || ''}${display}`)\r\n\r\n    const res = Server.responseText\r\n    return JSON.parse(res)\r\n}\r\n\r\nfunction progress(indicator) {\r\n    let i = 0\r\n    return function increment() {\r\n        return indicator[i++ % indicator.length]\r\n    }\r\n}\r\n\r\nfunction findUnusedPort(port) {\r\n    const command = 'netstat -nao'\r\n    const netstat = WShell.Exec(command)\r\n    const res = netstat.StdOut.ReadAll()\r\n\r\n    while (true) {\r\n        port = port || parseInt(Math.random() * (65535 - 49152)) + 49152\r\n        const exp = new RegExp(port + '\\\\s*$', 'm')\r\n        if (!exp.test(res)) break\r\n        port = null\r\n    }\r\n    return port\r\n}\r\n\r\nfunction getEdgeWebDriver() {\r\n    const version = getEdgeVersion()\r\n    const driver = getEdgeDriverVersion()\r\n    if (version === driver) return console.log('Both are installed with the correct version // => %O', version)\r\n\r\n    const filename = 'msedgedriver.exe'\r\n    const architecture = WShell.Environment('Process').Item('PROCESSOR_ARCHITECTURE') === 'x86' ? '32' : '64'\r\n\r\n    const url = `https://msedgedriver.azureedge.net/${version}/edgedriver_win${architecture}.zip`\r\n    const zipSpec = resolve(WorkingDirectory, `edgedriver_win${architecture}.zip`)\r\n    let dirSpec\r\n    let fileSpec = resolve(WorkingDirectory, filename)\r\n    try {\r\n        console.log(download(url, zipSpec))\r\n        console.log('unzip %O', (dirSpec = toPosixSep(unzip(zipSpec))))\r\n        if (existsFileSync(fileSpec)) deleteFileSync(fileSpec)\r\n        console.log(moveFileSync(resolve(dirSpec, filename), fileSpec))\r\n        console.log(deletedirSync(dirSpec))\r\n        console.log(deleteFileSync(zipSpec))\r\n        console.log('%SDownload of webdriver is complete. version: %S', orange, version)\r\n    } catch (error) {\r\n        console.log('%SFailed to download webdriver. version %S', orange, version)\r\n        throw error\r\n    } finally {\r\n        if (existsFileSync(zipSpec)) console.log(deleteFileSync(zipSpec))\r\n        if (existsdirSync(dirSpec)) console.log(deletedirSync(dirSpec))\r\n    }\r\n}\r\n\r\n// exports\r\nmodule.exports = {\r\n    Window,\r\n    Document,\r\n    Element,\r\n    request,\r\n    getEdgeWebDriver\r\n}\r\n\r\n// command line\r\nif (isCLI(__filename) && (has('d') || has('download'))) getEdgeWebDriver()\r\n",
    "mapping": {},
    "path": "{edge}/wes_modules/webdriver/index.js"
  },
  "{970F1C52-4762-41A5-B752-6A49A2E19572}": {
    "source": "{\n  \"name\": \"webdriver\",\n  \"version\": \"0.7.2\",\n  \"description\": \"Operate the browser with wes\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/webdriver.git\"\n  },\n  \"keywords\": [\n    \"webdriver\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/webdriver/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/webdriver#readme\"\n}",
    "path": "{edge}/wes_modules/webdriver/package.json"
  },
  "{B3213289-B7BD-42FB-A675-E6B033841C72}": {
    "source": "{\n  \"name\": \"edge\",\n  \"version\": \"0.4.3\",\n  \"description\": \"Edge automation assistance\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/edge.git\"\n  },\n  \"keywords\": [\n    \"wes edge automation\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/edge/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/edge#readme\",\n  \"wes\": {\n    \"dependencies\": {\n      \"webdriver\": \"0.5.0\"\n    }\n  }\n}",
    "mapping": {},
    "path": "{edge}/package.json"
  },
  "{664B0CCC-56A5-4BEE-8392-F3A42741548B}": {
    "source": "{\n  \"name\": \"webdriver\",\n  \"version\": \"0.7.2\",\n  \"description\": \"Operate the browser with wes\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/webdriver.git\"\n  },\n  \"keywords\": [\n    \"webdriver\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/webdriver/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/webdriver#readme\"\n}",
    "mapping": {},
    "path": "{edge}/wes_modules/webdriver/package.json"
  },
  "{E016E304-4A16-480E-B873-1C4BA5F07C15}": {
    "source": "# edge\n*@wachaon/edge* は *wes* で *edge* の自動操縦を支援するモジュールです。\n\n## 特徴\n\n`edge` はブラウザの動作手続きを記述するだけではなく、*url* に対して *event* を設定していくイベント駆動型での操作を記述できます。\nイベントの *url* には文字列以外に正規表現も設定できるので、柔軟な設定が可能になります。\n自動操縦には不向きな場面も、あえて *url* を設定しないことで容易に手動操縦に切り替えれます。\nエラーが発生した場合でも可能な限り安全に終了処理を行います。\nブラウザに対する実際の操作は [*@wachaon/webdriver*](https://github.com/wachaon/webdriver) を参照してください。\n\n## インストール\n\n```shell\nwes install @wachaon/edge --unsafe --bare\n```\n\n*WebDriver* とブラウザは同じバージョンのものを使用する必要があります。\n\nこのモジュールをコマンドラインから `-d` もしくは `--download` オプションを指定して実行すると、ブラウザのバージョンとアーキテクチャーが同じ *WebDriver* をダウンロードし展開します。\n\n```shell\nwes edge --download\n```\n\n## 使い方\n\n| argument | type | description |\n|:---|:---:|:---|\n| `callback` | *{Function}* | 実際の処理を記述します |\n| `terminate` | *{Function}* | 終了時の処理を記述します |\n\n*edge* は明示的に終了させるまで、待機状態を維持します。終了させるにはブラウザを閉じるか `navigation.emit('terminate')` を実行できる様にスクリプトを構成してください。\n\n`edge()` は戻り値として `callback()` 内の `result` を返却します。\n\n下記のコードを実行してください。\nブラウザを閉じるか `https://www.yahoo` から始まる *url* に訪問するまで、*url* をコンソールに表示します。\n\n```javascript\nconst edge = require('edge.js')\n\nconst ret = edge((window, navi, res) => {\n    window.rect({\n        x: 1,\n        y: 1,\n        width: 1200,\n        height: 500\n    })\n    res.exports = []\n\n    navi.on(/^https?:\\/\\/www\\.yahoo\\b/, (url) => {\n        console.log('finished!')\n        navi.emit('terminate', res, window)\n    })\n\n    navi.on(/https?:\\/\\/.+/, (url) => {\n        console.log('URL: %O', url)\n        res.exports.push(url)\n    })\n\n    window.navigate('http://www.google.com')\n})\n\nconsole.log('ret // => %O', ret)\n```\n\n### `callback(window, navigation, result)`\n\n| argument | type | description |\n|:---|:---:|:---|\n| `window` | *{window}* | *window* を操作するクラス<br>*@wachaon/webdriver* の *window* クラスになります |\n| `navigation` | *{event}* | *event* の *Pub/Sub* (出版・購読型)モデル |\n| `result` | *{export}* | `result.export` にデータを入れることで、ファイルなどへの出力が容易になります |\n\n### `terminate(message, result)`\n\n`terminate()` は `navigation.emit('terminate')` が実行された時の挙動を記述します。既定値は *log* もしくはカレントディレクトリに `JSON.stringify(result.export)` の結果をファイルに出力します。\n`message` は 終了時にコンソールに出力するメッセージになります。\n",
    "mapping": {},
    "path": "{edge}/README.md"
  },
  "{940EC5F0-B4B3-4F88-91F8-7F0708BE8336}": {
    "source": "# Windows Script Host と WebDriver で Chromium 版 Microsoft Edge を操作する\r\n\r\nWindows Script Host でブラウザを操作したい場合、ie のオートメーションオブジェクトを利用して操作していましたが、\r\n2022年6月15日でサポートが終了しており、現状 `new ActiveXObject('InternetExplorer.Application')` でオートメーションオブジェクトを作成できたとしても、サイトの方も ie のサポートを終了していれば正しく表示できない可能性があります。\r\n\r\nChromium 版 Microsoft Edge などのブラウザを操作する場合は WebDriver を介して操作をすることになります。\r\nプログラムから WebDriver にリクエストを送る必要があるため、node.js + Selenium + WebDriver などの環境構築が必須にまります。\r\n\r\n自動アップデートされるブラウザのバージョンに追従して WebDriver を更新する必要があり、\r\n",
    "mapping": {},
    "path": "{edge}/dev/README.md"
  },
  "{EC135988-C997-41A9-B40E-83771C887619}": {
    "source": "# webdriver\n*Internet Explorer* が 2022/6/15 にサポート対象外になることにより、*windows script host* ではブラウザーの操作ができなくなると予想されます。\n\n今後ブラウザを操作するならば、*WebDriver* 経由で *Microsoft Edge based on Chromium* を操作が主流になります。\n\nこのモジュールは *WebDriver* の操作を支援します。\n\n## このモジュールのインストール\n\n```shell\nwes install @wachaon/webdriver --unsafe --bare\n```\n\n## *WebDriver* をインストールする\n\n*WebDriver* とブラウザは同じバージョンのものを使用する必要があります。\n\nこのモジュールをコマンドラインから `-d` もしくは `--download` オプションを指定して実行すると、ブラウザのバージョンとアーキテクチャーが同じ *WebDriver* をダウンロードし展開します。\n\n```shell\nwes webdriver --download\n```\n\n## usage\n\n下記スクリプトを実行して動作を確認してくだい。\n\n```javascript\nconst { Window } = require('webdriver')\nconst genGUID = require('genGUID')\n\nconst window = new Window()\nconst { document } = window\nwindow.rect({\n    x: 0,\n    y: 0,\n    width: 1280,\n    height: 600\n})\nwindow.navigate('https://www.google.co.jp')\n\nlet [input] = document.querySelectorAll('[name=\"q\"]')\ninput.setValue('selenium')\n\nlet [form] = document.querySelectorAll('form')\nlet [but] = form.querySelectorAll('input[name=\"btnK\"]')\nconsole.log('outerHTML // => %O', but.getProperty('outerHTML'))\nconsole.log('but class=%O', but.getAttribute('class'))\nbut.click()\n\nlet status = window.getStatus()\nconsole.log('Status: %O', status)\n\nconst name = genGUID()\ndocument.addCookie({\n    name: name,\n    value: genGUID()\n})\nconsole.log('getCookie(%O) // => %O', name, document.getCookie(name))\ndocument.deleteCookie(name)\n\nwindow.close('finished')\n```\n\n次は要素のスクリーンショットを取得する例になります。\n\n```javascript\nconst { Window } = require('webdriver')\nconst { writeFileSync } = require('filesystem')\nconst { resolve, WorkingDirectory } = require('pathname')\nconst genGUID = require('genGUID')\n\nconst window = new Window\nconst { document } = window\nwindow.rect({\n    x: 0,\n    y: 0,\n    width: 1280,\n    height: 600\n})\nwindow.navigate('https://www.yahoo.co.jp/')\n\nconst [elm] = document.querySelectorAll('#ContentWrapper > main > div:nth-child(2)')\nconst screen = elm.takeScreenShot()\n\nconst spec = resolve(WorkingDirectory, 'dev', genGUID() + '.png')\nconsole.log(writeFileSync(spec, screen))\n\nwindow.quit()\n```\n\n## `Window` クラス\n\nブラウザウインドウを操作するクラスになります。\n\n### `document`\n\n`Document` クラスの実体になります。\n\n### `constructor(port, spec)`\n\n`port` は *web driver* と通信するポートを指定します。既定値は `9515` ですが、`9515` ポートが使用済みの場合は使用可能なポートを探します。\n\n`spec` は *web driver* のファイルパスを指定します。既定値は `msedgedriver.exe` です。相対パスで指定する場合はカレントディレクトリからの相対パスにします。\n\n### `rect(prop)`\n\nウインドウの位置とサイズを変更します。\n`prop` は `{x, y, width, height}` を指定します。 `x`、`y` はウインドウ位置、`width`、`height` はウインドウサイズを指定します。\n\n### `navigate(url)`\n\n`url` に指定した *URL* に移動します。\n\n### `close(message)`\n\nブラウザの操作を終了します。\n`message` を指定した場合は、終了後にコンソールへ `message` を表示します。\n\n### `getURL()`\n\nブラウザの現在の *URL* を取得します。\n\n### `back()`\n\nブラウザの履歴から一つ戻ります。\n\n## `Document` クラス\n\n*HTML Document* から必要な要素を指定するクラスになります。\n\n簡素化を優先する為、メソッドは最低限の実装になります。\n\n### `querySelectorAll(selector)`\n\n*CSS Selector* で要素を検索します。対象がある場合の戻り値は要素の配列になります。\n\n### `getTitle()`\n\nタイトルを取得します。\n\n### `getSource()`\n\n*html* を取得します。\n\n### `executeScript(script, args)`\n\n`script` は関数オブジェクトを渡します。`script` は内部で `String(script)` で文字列に変換されるので、\n関数外部の参照はできません。\n\n```javascript\ndocument.executeScript(\n    function (text) {\n        document.getElementsByTagName('input')[0].value = text\n    },\n    [\"hello world\"]\n)\n```\n\n### `takeScreenShot()`\n\nスクリーンショットを撮ります。戻り値は `Byte[]` になります。\n\n### `getCookie(name)`\n\nクッキーを取得します。`name` があればその名前のクッキーを取得、`name` がなければ全てのクッキーを取得します。\n\n### `setCookie(object)`\n\nクッキーを設定します。\n\n### `deleteCookie(name)`\n\n`name` のクッキーを削除します。\n\n## `Element` クラス\n\n### `querySelectorAll(selector)`\n\n現在の要素の子孫ノードに対して *CSS Selector* で要素を検索します。対象がある場合の戻り値は要素の配列になります。\n\n### `getAttribute (attribute)`\n\n現在の要素の *element attribute* を取得します。\n\n### `getProperty (property)`\n\n現在の要素の *javascript property* を取得します。\n\n### `click()`\n\n現在の要素をクリックします。\n\n### `setValue(text)`\n\n現在の *input* などの要素に `text` を入力します。",
    "mapping": {},
    "path": "{edge}/wes_modules/webdriver/README.md"
  },
  "{744505B6-5D8D-4FE7-B154-2D7DB50B8309}": {
    "source": "MIT License\n\nCopyright (c) 2022 wachaon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "mapping": {},
    "path": "{edge}/LICENSE"
  },
  "{F79739D6-2BAA-4BD3-B134-E397A533098C}": {
    "source": "MIT License\n\nCopyright (c) 2022 wachaon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "mapping": {},
    "path": "{edge}/wes_modules/webdriver/LICENSE"
  }
}